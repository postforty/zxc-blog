[
  {
    "id": "getting-started-with-react",
    "title": {
      "ko": "React 시작하기",
      "en": "Getting Started with React"
    },
    "author": "Dandy",
    "createdAt": "2025-10-20T10:00:00Z",
    "summary": {
      "ko": "React의 기본 개념과 Vite를 사용한 프로젝트 설정 방법에 대해 알아봅니다.",
      "en": "Learn the basic concepts of React and how to set up a project using Vite."
    },
    "content": {
      "ko": "## React란?\n\nReact는 사용자 인터페이스를 구축하기 위한 JavaScript 라이브러리입니다. 컴포넌트 기반 아키텍처를 사용하여 재사용 가능한 UI를 쉽게 만들 수 있습니다.\n\n## Vite로 프로젝트 시작하기\n\n`npm create vite@latest my-react-app -- --template react-ts` 명령어를 사용하여 새로운 React + TypeScript 프로젝트를 시작할 수 있습니다.",
      "en": "## What is React?\n\nReact is a JavaScript library for building user interfaces. It uses a component-based architecture to easily create reusable UI."
    },
    "likes": 15,
    "tags": ["React", "Vite", "TypeScript"]
  },
  {
    "id": "understanding-tailwind-css",
    "title": {
      "ko": "Tailwind CSS 이해하기",
      "en": "Understanding Tailwind CSS"
    },
    "author": "Dandy",
    "createdAt": "2025-10-18T14:30:00Z",
    "summary": {
      "ko": "Utility-first CSS 프레임워크인 Tailwind CSS의 장점과 사용법을 소개합니다.",
      "en": "An introduction to the benefits and usage of Tailwind CSS, a utility-first CSS framework."
    },
    "content": {
      "ko": "## Utility-First 접근법\n\nTailwind CSS는 미리 정의된 유틸리티 클래스를 HTML에 직접 적용하여 스타일을 적용하는 방식을 사용합니다. 이를 통해 커스텀 CSS 작성 없이 빠르게 UI를 개발할 수 있습니다.\n\n예시: `<div class=\"p-4 bg-blue-500 text-white\">...</div>`",
      "en": "## Utility-First Approach\n\nTailwind CSS uses a utility-first approach where styles are applied by adding predefined utility classes directly to the HTML."
    },
    "likes": 22,
    "tags": ["TailwindCSS", "CSS", "Utility-First"]
  },
  {
    "id": "dark-mode-in-react",
    "title": {
      "ko": "React 앱에 다크 모드 추가하기",
      "en": "Adding Dark Mode to a React App"
    },
    "author": "Dandy",
    "createdAt": "2025-10-15T09:00:00Z",
    "summary": {
      "ko": "Tailwind CSS와 React Context API를 사용하여 다크 모드 기능을 구현하는 방법을 단계별로 설명합니다.",
      "en": "A step-by-step guide to implementing a dark mode feature using Tailwind CSS and React Context API."
    },
    "content": {
      "ko": "## 왜 다크 모드인가?\n\n다크 모드는 사용자의 눈의 피로를 줄여주고, 특정 환경에서 가독성을 높여줍니다. 또한 최신 앱의 트렌디한 기능 중 하나입니다.\n\n## 구현 방법\n\n1.  `ThemeProvider` Context를 생성합니다.\n2.  `localStorage`에 사용자 테마 설정을 저장합니다.\n3.  `<html>` 요소에 `dark` 클래스를 토글하여 Tailwind CSS의 `dark:` variant를 활성화합니다.",
      "en": "## Why Dark Mode?\n\nDark mode reduces eye strain and improves readability in certain environments. It is also a trendy feature in modern apps."
    },
    "likes": 30,
    "tags": ["React", "TailwindCSS", "Dark Mode"]
  },
  {
    "id": "getting-started-with-nodejs",
    "title": {
      "ko": "Node.js 시작하기",
      "en": "Getting Started with Node.js"
    },
    "author": "Dandy",
    "createdAt": "2025-10-12T10:00:00Z",
    "summary": {
      "ko": "Node.js의 기본 개념과 Express를 사용한 서버 구축 방법에 대해 알아봅니다.",
      "en": "Learn the basic concepts of Node.js and how to build a server using Express."
    },
    "content": {
      "ko": "Node.js는 Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임입니다.",
      "en": "Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine."
    },
    "likes": 45,
    "tags": ["Node.js", "Express", "JavaScript"]
  },
  {
    "id": "introduction-to-typescript",
    "title": {
      "ko": "TypeScript 입문",
      "en": "Introduction to TypeScript"
    },
    "author": "Dandy",
    "createdAt": "2025-10-10T11:00:00Z",
    "summary": {
      "ko": "TypeScript의 기본 타입과 인터페이스, 제네릭에 대해 알아봅니다.",
      "en": "Learn about basic types, interfaces, and generics in TypeScript."
    },
    "content": {
      "ko": "TypeScript는 JavaScript에 타입을 추가한 언어입니다.",
      "en": "TypeScript is a language that adds types to JavaScript."
    },
    "likes": 38,
    "tags": ["TypeScript", "JavaScript"]
  },
  {
    "id": "state-management-with-zustand",
    "title": {
      "ko": "Zustand를 이용한 상태 관리",
      "en": "State Management with Zustand"
    },
    "author": "Dandy",
    "createdAt": "2025-10-08T15:00:00Z",
    "summary": {
      "ko": "가볍고 빠른 React 상태 관리 라이브러리 Zustand의 사용법을 알아봅니다.",
      "en": "Learn how to use Zustand, a small, fast and scalable bearbones state-management solution."
    },
    "content": {
      "ko": "Zustand는 Redux, MobX와 같은 다른 상태 관리 라이브러리에 비해 매우 간단합니다.",
      "en": "Zustand is very simple compared to other state management libraries like Redux or MobX."
    },
    "likes": 25,
    "tags": ["React", "Zustand", "State Management"]
  },
  {
    "id": "react-testing-library-basics",
    "title": {
      "ko": "React Testing Library 기초",
      "en": "React Testing Library Basics"
    },
    "author": "Dandy",
    "createdAt": "2025-10-05T18:00:00Z",
    "summary": {
      "ko": "React 컴포넌트를 테스트하는 간단하고 직관적인 방법을 제공하는 React Testing Library의 기초를 다룹니다.",
      "en": "Covering the basics of React Testing Library, which provides a simple and intuitive way to test React components."
    },
    "content": {
      "ko": "React Testing Library는 사용자의 관점에서 컴포넌트를 테스트하는 것을 권장합니다.",
      "en": "React Testing Library encourages testing components from the user's perspective."
    },
    "likes": 18,
    "tags": ["React", "Testing", "React Testing Library"]
  },
  {
    "id": "css-in-js-with-styled-components",
    "title": {
      "ko": "styled-components로 CSS-in-JS 시작하기",
      "en": "CSS-in-JS with styled-components"
    },
    "author": "Dandy",
    "createdAt": "2025-10-02T12:00:00Z",
    "summary": {
      "ko": "styled-components를 사용하여 React 컴포넌트에 직접 스타일을 적용하는 방법을 알아봅니다.",
      "en": "Learn how to apply styles directly to React components using styled-components."
    },
    "content": {
      "ko": "styled-components는 컴포넌트 기반 스타일링을 위한 인기 있는 라이브러리입니다.",
      "en": "styled-components is a popular library for component-based styling."
    },
    "likes": 28,
    "tags": ["React", "CSS-in-JS", "styled-components"]
  },
  {
    "id": "building-a-rest-api-with-express",
    "title": {
      "ko": "Express로 REST API 만들기",
      "en": "Building a REST API with Express"
    },
    "author": "Dandy",
    "createdAt": "2025-09-30T16:00:00Z",
    "summary": {
      "ko": "Node.js와 Express를 사용하여 기본적인 REST API를 구축하는 과정을 안내합니다.",
      "en": "A guide to building a basic REST API using Node.js and Express."
    },
    "content": {
      "ko": "REST API는 웹 서비스의 중요한 부분입니다.",
      "en": "REST APIs are an important part of web services."
    },
    "likes": 55,
    "tags": ["Node.js", "Express", "API", "REST"]
  },
  {
    "id": "introduction-to-graphql",
    "title": {
      "ko": "GraphQL 입문",
      "en": "Introduction to GraphQL"
    },
    "author": "Dandy",
    "createdAt": "2025-09-28T09:00:00Z",
    "summary": {
      "ko": "GraphQL의 기본 개념과 REST API와의 차이점을 알아봅니다.",
      "en": "Learn the basic concepts of GraphQL and its differences from REST APIs."
    },
    "content": {
      "ko": "GraphQL은 API를 위한 쿼리 언어입니다.",
      "en": "GraphQL is a query language for APIs."
    },
    "likes": 42,
    "tags": ["GraphQL", "API"]
  }
]